<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="statusStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAAAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAACAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH2PzjklRc64Jk3W1y9d1rJliOErAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAEdLxYQmK8jcIiTH5C4z0NxuceRxAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/////////////////////////////H////Af///gD///wAf//8AH///A
        Bf/gQAAPwAAAA4AAAAOAAADhAAAB/wAAAAEAAwHhAAIA4YAAAAPAAIAH8GOED//jj+//44///+OP///x
        H///+H////////////////////////////8=
</value>
  </data>
</root>